{"version":3,"file":"Dropdown-6316a45c.js","sources":["../../src/components/dropdown/Dropdown.jsx"],"sourcesContent":["import React, { useState, useEffect, useLayoutEffect, forwardRef } from \"react\";\nimport \"./Dropdown.scss\";\nimport PropTypes from \"prop-types\";\nimport Box from \"../box\";\nimport TextField from \"../text-field\";\nimport inputPropTypes, { defaultProps } from \"../../utils/inputPropTypes\";\nimport classNames from \"../../utils/classNames\";\nimport Text from \"../text\";\n\nconst Dropdown = forwardRef(\n  (\n    {\n      label,\n      onChange,\n      onBlur,\n      name,\n      options,\n      initialValue,\n      returnObjModel,\n      ...props\n    },\n    ref\n  ) => {\n    const [inputValue, setInputValue] = useState(\"\");\n    const [showOptions, setShowOptions] = useState(false);\n    const [computedOptions, setComputedOptions] = useState([]);\n    const [selectedIndex, setSelectedIndex] = useState(-1);\n    const [selectedOption, setSelectedOption] = useState(null);\n    const [isBlur, setIsBlur] = useState(true);\n\n    const returnOptionValue = (option) =>\n      typeof option === \"object\" ? option.value : option;\n\n    const returnOptionText = (option) =>\n      typeof option === \"object\" ? option.text : option;\n\n    useLayoutEffect(() => {\n      if (initialValue) {\n        setInputValue(initialValue);\n      }\n\n    }, []);\n\n    useEffect(() => {\n      if (!isBlur) {\n        setShowOptions(true);\n      }\n      if (selectedOption) {\n        if (inputValue !== returnOptionText(selectedOption)) {\n          setSelectedOption(null);\n        }\n      } else {\n        if (inputValue) {\n          setComputedOptions(\n            [...options].filter((option) => {\n              if (typeof option === \"string\") {\n                return option.toLowerCase().includes(inputValue.toLowerCase());\n              } else {\n                return option.text\n                  .toLowerCase()\n                  .includes(inputValue.toLowerCase());\n              }\n            })\n          );\n        } else {\n          setComputedOptions([...options]);\n        }\n      }\n    }, [options, inputValue, selectedOption, isBlur]);\n\n    useEffect(() => {\n      if (onChange && typeof onChange === \"function\") {\n        onChange(returnObjModel ? selectedOption : selectedOption?.value);\n      }\n    }, [selectedOption]);\n\n    useEffect(() => {\n      if (isBlur && !selectedOption) {\n        let exactMatch = false;\n        for (let option of computedOptions) {\n          if (typeof option === \"string\") {\n            if (option.toLowerCase() === inputValue.toLowerCase()) {\n              exactMatch = true;\n              setInputValue(option);\n              setSelectedOption(option);\n              break;\n            }\n          } else {\n            if (option.text.toLowerCase() === inputValue.toLowerCase()) {\n              exactMatch = true;\n              setInputValue(option.text);\n              setSelectedOption(option);\n              break;\n            }\n          }\n        }\n        if (!exactMatch) {\n          setInputValue(\"\");\n          setSelectedOption(null);\n        }\n      }\n    }, [isBlur]);\n\n    const handleFocus = () => {\n      setIsBlur(false);\n      setShowOptions(true);\n    };\n\n    const handleBlur = async () => {\n      setIsBlur(true);\n      setTimeout(() => {\n        setShowOptions(false);\n      }, 300);\n    };\n\n    const handleClickedOption = async (option) => {\n      if (option) {\n        if (typeof option === \"string\") {\n          setInputValue(option);\n        } else {\n          setInputValue(option.text);\n        }\n        setSelectedOption(option);\n        setTimeout(() => {\n          setShowOptions(false);\n        }, 300);\n      }\n    };\n\n    const handleLeave = (e) => {\n      if (!e.target.closest(\".ui-dropdown\")) {\n        handleBlur();\n      }\n    };\n\n    const handleKeyDown = async (e) => {\n      switch (e.key) {\n        case \"ArrowDown\":\n          if (!showOptions) {\n            setShowOptions(true);\n          }\n          if (selectedIndex + 1 <= computedOptions.length - 1)\n            setSelectedIndex(selectedIndex + 1);\n          else setSelectedIndex(0);\n          break;\n        case \"ArrowUp\":\n          if (!showOptions) {\n            setShowOptions(true);\n          }\n          if (selectedIndex - 1 >= 0) setSelectedIndex(selectedIndex - 1);\n          else setSelectedIndex(computedOptions.length - 1);\n          break;\n        case \"Enter\":\n          handleClickedOption(computedOptions[selectedIndex]);\n          break;\n        case \"Escape\":\n          handleBlur();\n          e.target.blur();\n          break;\n        default:\n          break;\n      }\n    };\n\n    useEffect(() => {\n      window.addEventListener(\"click\", handleLeave);\n      return () => {\n        window.removeEventListener(\"click\", handleLeave);\n      };\n    }, []);\n\n    const mappedComputedOptions = computedOptions.map((option, index) => (\n      <Box\n        className={classNames({\n          \"ui-dropdown__option\": true,\n          active: selectedIndex === index,\n        })}\n        onMouseEnter={() => setSelectedIndex(index)}\n        onClick={() => handleClickedOption(option)}\n        key={`option-${index}`}\n      >\n        {typeof option === \"object\" && option.icon && (\n          <Box className={\"ui-dropdown__icon\"}>{option.icon}</Box>\n        )}\n        <Text marginY={0} scale={\"subhead\"} fontFace={\"circularSTD\"}>\n          {typeof option === \"string\" ? option : option.text}\n        </Text>\n      </Box>\n    ));\n\n    return (\n      <Box className={\"ui-dropdown\"}>\n        <TextField\n          dropDown\n          {...props}\n          value={inputValue}\n          onKeyDown={handleKeyDown}\n          onFocus={handleFocus}\n          onBlur={handleBlur}\n          onChange={(e) => setInputValue(e.target.value)}\n          onRightIconClick={() => setShowOptions(!showOptions)}\n          leftIconComponent={selectedOption?.icon}\n          ref={ref}\n        />\n        {showOptions && (\n          <Box className={\"ui-dropdown__options\"}>{mappedComputedOptions}</Box>\n        )}\n      </Box>\n    );\n  }\n);\n\nexport default Dropdown;\n\nDropdown.defaultProps = {\n  ...defaultProps,\n};\n\nDropdown.propTypes = {\n  ...inputPropTypes,\n  options: PropTypes.array,\n  returnObjModel: PropTypes.bool,\n  onChange: PropTypes.func,\n  initialValue: PropTypes.string,\n};\n"],"names":["Dropdown","forwardRef","label","onChange","onBlur","name","options","initialValue","returnObjModel","props","ref","inputValue","setInputValue","useState","showOptions","setShowOptions","computedOptions","setComputedOptions","selectedIndex","setSelectedIndex","selectedOption","setSelectedOption","isBlur","setIsBlur","returnOptionText","option","useLayoutEffect","useEffect","exactMatch","handleFocus","handleBlur","handleClickedOption","handleLeave","handleKeyDown","mappedComputedOptions","index","jsxs","Box","classNames","jsx","Text","TextField","Dropdown$1","defaultProps","inputPropTypes","PropTypes"],"mappings":"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"}