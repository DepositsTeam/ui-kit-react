{"version":3,"file":"TagDropdown.stories-3103913c.js","sources":["../../src/components/tag-dropdown/TagDropdown.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport Box from \"../box\";\nimport Text from \"../text\";\nimport PropTypes from \"prop-types\";\nimport inputPropTypes, { defaultProps } from \"../../utils/inputPropTypes\";\nimport classNames from \"../../utils/classNames\";\nimport keyGen from \"../../utils/keyGen\";\nimport Icon from \"../icon\";\nimport Close from \"../icons/Close.jsx\";\nimport ChevronFilledDown from \"../icons/ChevronFilledDown.jsx\";\nimport TextField from \"../text-field\";\nimport Search from \"../icons/Search.jsx\";\nimport Checkbox from \"../checkbox\";\nimport Error from \"../icons/Error.jsx\";\nimport \"./TagDropdown.scss\";\n\nconst TagDropdown = ({\n  size,\n  options,\n  labelClass,\n  labelFontFace,\n  label,\n  errorMessage,\n  leftIcon,\n  rightIcon,\n  onChange,\n  placeholder,\n  showCheckboxes,\n  initiallySelectedTags,\n  maxDropdownHeight,\n  initiallyClosed,\n  selectOneItem,\n  ...props\n}) => {\n  const [inputTags, setInputTags] = useState([]);\n  const [selectedTags, setSelectedTags] = useState([]);\n  const [showOptions, setShowOptions] = useState(initiallyClosed);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [availableOptions, setAvailableOptions] = useState([]);\n  const validInput = useRef();\n  const [mounted, setMounted] = useState(false);\n\n  useEffect(() => {\n    setInputTags(\n      [...options].filter((option) => {\n        if (typeof option === \"string\") {\n          return selectedTags.includes(option);\n        } else {\n          return selectedTags.includes(option.value);\n        }\n      })\n    );\n  }, [options, selectedTags]);\n\n  useEffect(() => {\n    setMounted(true);\n    if (initiallySelectedTags && Array.isArray(initiallySelectedTags)) {\n      options.forEach((option) => {\n        const optionValue = returnOptionValue(option);\n        if (initiallySelectedTags.includes(optionValue)) {\n          setSelectedTags((tags) => {\n            const localTags = [...tags];\n            localTags.push(optionValue);\n            return localTags;\n          });\n        }\n      });\n    }\n  }, []);\n\n  useEffect(() => {\n    if (mounted) {\n      onChange(selectedTags);\n    }\n  }, [selectedTags]);\n\n  const hideOptionsOnOutsideClick = (e) => {\n    if (!e.target.closest(\".ui-tag-dropdown__wrapper\")) {\n      setShowOptions(false);\n    }\n  };\n\n  const toggleOptions = () => {\n    setShowOptions(!showOptions);\n  };\n\n  const returnOptionValue = (option) =>\n    typeof option === \"object\" ? option.value : option;\n\n  const returnOptionText = (option) =>\n    typeof option === \"object\" ? option.text : option;\n\n  useEffect(() => {\n    if (showOptions) {\n      validInput.current.focus();\n    }\n  });\n\n  useEffect(() => {\n    window.addEventListener(\"click\", hideOptionsOnOutsideClick);\n\n    return () => {\n      window.removeEventListener(\"click\", hideOptionsOnOutsideClick);\n    };\n  }, []);\n\n  useEffect(() => {\n    const unSelectedOptions = [...options];\n    setAvailableOptions(\n      unSelectedOptions.filter((option) =>\n        typeof option === \"string\"\n          ? option.toLowerCase().includes(inputValue.toLowerCase())\n          : option.text.toLowerCase().includes(inputValue.toLowerCase())\n      )\n    );\n  }, [options, selectedTags, inputValue]);\n\n  const handleDeleteTag = (currentTag) => {\n    setSelectedTags(\n      [...selectedTags].filter((tag) => {\n        return typeof currentTag === \"string\"\n          ? tag !== currentTag\n          : tag !== currentTag.value;\n      })\n    );\n  };\n\n  const switchOptionInTags = (option) => {\n    const optionValue = returnOptionValue(option);\n    let clonedTags = [...selectedTags];\n    if (clonedTags.includes(optionValue)) {\n      clonedTags.splice(selectedTags.indexOf(optionValue), 1);\n    } else {\n      if (selectOneItem) {\n        clonedTags = [optionValue];\n      } else {\n        clonedTags.push(optionValue);\n      }\n    }\n    setSelectedTags(clonedTags);\n  };\n\n  const toggleOptionInSelectedOptions = (option) => {\n    if (!showCheckboxes) {\n      switchOptionInTags(option);\n    }\n  };\n\n  const mappedInputTags = inputTags.map((tag, index) => (\n    <Box\n      className={\"ui-tag-dropdown__input-tag\"}\n      key={`ui-tag-dropdown${keyGen()}_${index}`}\n    >\n      <Text\n        className={\"ui-tag-dropdown__input-tag-text\"}\n        scale={\"subhead\"}\n        fontFace={\"circularSTD\"}\n      >\n        {typeof tag === \"string\" ? tag : tag.text}\n      </Text>\n      <Icon\n        icon={Close}\n        className={\"ui-tag-dropdown__close-icon\"}\n        height=\"16px\"\n        width=\"16px\"\n        onClick={() => handleDeleteTag(tag)}\n      />\n    </Box>\n  ));\n\n  const mappedAvailableOptions = availableOptions.map((option, index) => (\n    <Box\n      className={classNames({\n        \"ui-tag-dropdown__dropdown__option\": true,\n        dropdownMode: !showCheckboxes,\n        selected: selectedTags.includes(returnOptionValue(option)),\n      })}\n      cursor={showCheckboxes ? \"auto\" : \"pointer\"}\n      onClick={() => toggleOptionInSelectedOptions(option)}\n      key={`option-${index}`}\n    >\n      {showCheckboxes ? (\n        <Checkbox\n          checked={selectedTags.includes(returnOptionValue(option))}\n          value={returnOptionValue(option)}\n          onChange={() => switchOptionInTags(option)}\n        >\n          <Text marginY={0} fontFace={\"circularSTD\"} scale={\"subhead\"}>\n            {returnOptionText(option)}\n          </Text>\n        </Checkbox>\n      ) : (\n        <Text\n          marginY={0}\n          fontFace={\"circularSTD\"}\n          marginLeft={8}\n          scale={\"subhead\"}\n        >\n          {returnOptionText(option)}\n        </Text>\n      )}\n    </Box>\n  ));\n\n  return (\n    <Box\n      className={classNames({\n        \"ui-tag-dropdown__wrapper\": true,\n        [`size__${size}`]: true,\n      })}\n      style={{ \"--dropdown-content-height\": maxDropdownHeight }}\n    >\n      <Box is={\"label\"}>\n        <Text\n          className={classNames({\n            [labelClass]: labelClass,\n            \"ui-tag-dropdown__label\": true,\n          })}\n          fontFace={labelFontFace}\n          scale={\"subhead\"}\n        >\n          {label}\n        </Text>\n      </Box>\n      <Box\n        className={classNames({\n          \"ui-tag-dropdown__input-wrapper\": true,\n          hasError: !!errorMessage,\n        })}\n        onClick={toggleOptions}\n      >\n        {leftIcon && (\n          <Box className={\"ui-tag-dropdown__left-icon\"}>{leftIcon}</Box>\n        )}\n        <Box className={\"ui-tag-dropdown__input-wrapper__left\"}>\n          {mappedInputTags}\n          {placeholder && !inputTags.length && (\n            <Text className={\"ui-tag-dropdown__placeholder\"} marginY={0}>\n              {placeholder}\n            </Text>\n          )}\n        </Box>\n        <Box className={\"ui-tag-dropdown__input-wrapper__right\"}>\n          {rightIcon || (\n            <Icon\n              icon={ChevronFilledDown}\n              className={\"ui-text-field__right-icon\"}\n            />\n          )}\n        </Box>\n      </Box>\n      {showOptions && (\n        <Box className={\"ui-tag-dropdown__dropdown\"}>\n          <Box className={\"ui-tag-dropdown__dropdown__header\"}>\n            <TextField\n              ref={validInput}\n              invisible\n              leftIcon={Search}\n              placeholder={placeholder}\n              size={\"large\"}\n              value={inputValue}\n              onChange={(e) => setInputValue(e.target.value)}\n            />\n          </Box>\n          <Box className={\"ui-tag-dropdown__dropdown__options\"}>\n            {mappedAvailableOptions}\n          </Box>\n        </Box>\n      )}\n      {errorMessage && (\n        <Box className={\"ui-text-field__error\"}>\n          <Icon icon={Error} className={\"ui-text-field__error-icon\"} />\n          <Text\n            className={\"ui-text-field__error-text\"}\n            scale={\"subhead\"}\n            fontFace={\"circularSTD\"}\n          >\n            {errorMessage}\n          </Text>\n        </Box>\n      )}\n    </Box>\n  );\n};\n\nexport default TagDropdown;\n\nTagDropdown.propTypes = {\n  ...inputPropTypes,\n  placeholder: PropTypes.string,\n  options: PropTypes.array,\n  modelValue: PropTypes.array,\n  showCheckboxes: PropTypes.bool,\n  onChange: PropTypes.func,\n  initiallySelectedTags: PropTypes.array,\n  maxDropdownHeight: PropTypes.string,\n  initiallyClosed: PropTypes.bool,\n  selectOneItem: PropTypes.bool,\n};\n\nTagDropdown.defaultProps = {\n  ...defaultProps,\n  showCheckboxes: true,\n  maxDropdownHeight: \"250px\",\n  initiallyClosed: false,\n};\n"],"names":["TagDropdown","size","options","labelClass","labelFontFace","label","errorMessage","leftIcon","rightIcon","onChange","placeholder","showCheckboxes","initiallySelectedTags","maxDropdownHeight","initiallyClosed","selectOneItem","props","inputTags","setInputTags","useState","selectedTags","setSelectedTags","showOptions","setShowOptions","inputValue","setInputValue","availableOptions","setAvailableOptions","validInput","useRef","mounted","setMounted","useEffect","option","optionValue","returnOptionValue","tags","localTags","hideOptionsOnOutsideClick","toggleOptions","returnOptionText","unSelectedOptions","handleDeleteTag","currentTag","tag","switchOptionInTags","clonedTags","toggleOptionInSelectedOptions","mappedInputTags","index","jsxs","Box","jsx","Text","Icon","Close","keyGen","mappedAvailableOptions","classNames","Checkbox","ChevronFilledDown","TextField","Search","Error","TagDropdown$1","inputPropTypes","PropTypes","defaultProps"],"mappings":"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"}