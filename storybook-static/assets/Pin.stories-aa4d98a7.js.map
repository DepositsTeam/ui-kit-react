{"version":3,"file":"Pin.stories-aa4d98a7.js","sources":["../../src/components/pin-input/PinInput.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Box from \"../box\";\nimport \"./PinInput.scss\";\nimport inputPropTypes, { defaultProps } from \"../../utils/inputPropTypes\";\nimport classNames from \"../../utils/classNames\";\nimport Text from \"../text\";\nimport uniqueRandomString from \"../../utils/uniqueRandomString\";\nimport TextField from \"../text-field\";\nimport ErrorIcon from \"../icons/Error.jsx\";\nimport Icon from \"../icon\";\n\nconst PinInput = ({\n  label,\n  size,\n  labelClass,\n  labelFontFace,\n  spacing,\n  errorMessage,\n  invisible,\n  noOfCharacters,\n  initialValue,\n  placeholder,\n  password,\n  onlyNumbers,\n  onChange,\n  ...props\n}) => {\n  const [data, setData] = useState([]);\n  const [initialized, setInitialized] = useState(false);\n  const [initiated, setInitiated] = useState(false);\n\n  const updateValue = (e, index) => {\n    const cloneData = [...data];\n    const value = e.target.value;\n    if (value) {\n      // We are changing an empty field\n      if (index < data.length - 1) {\n        let nextInput = document.getElementById(data[index + 1].id);\n        nextInput.focus();\n        setTimeout(() => {\n          nextInput.select();\n        });\n      }\n    } else if (!value) {\n      if (index > 0) {\n        let nextInput = document.getElementById(data[index - 1].id);\n        nextInput.focus();\n        setTimeout(() => {\n          nextInput.select();\n        });\n      }\n    }\n    cloneData[index].value = value;\n\n    setData(cloneData);\n\n    if (onChange && typeof onChange === \"function\") {\n      onChange(\n        data.reduce(\n          (prev, curr) =>\n            (typeof prev === \"string\" ? prev : prev.value) + curr.value\n        ),\n        \"\"\n      );\n    }\n  };\n\n  useEffect(() => {\n    if (!initialized) {\n      for (let i = 0; i < noOfCharacters; i++) {\n        setData((data) => {\n          data.push({\n            value: \"\",\n            id: uniqueRandomString(19, 8),\n          });\n          return data;\n        });\n        setInitialized(true);\n      }\n    }\n    if (initialized && !initiated && initialValue.length === data.length) {\n      setData((data) =>\n        data.map((datum, index) => ({\n          ...datum,\n          value: initialValue[index],\n        }))\n      );\n      setInitiated(true);\n    }\n  }, [data, initialValue, initialized, initiated, noOfCharacters]);\n\n  const handleKeyDown = async (e, index) => {\n    if (e.key === \"ArrowLeft\") {\n      if (index !== 0) {\n        let nextInput = document.getElementById(data[index - 1].id);\n        nextInput.focus();\n        setTimeout(() => {\n          nextInput.select();\n        });\n      }\n    }\n    if (e.key === \"ArrowRight\") {\n      if (index !== data.length - 1) {\n        let nextInput = document.getElementById(data[index + 1].id);\n        nextInput.focus();\n        setTimeout(() => {\n          nextInput.select();\n        });\n      }\n    }\n  };\n\n  const textFields = data.map((item, index) => (\n    <TextField\n      id={item.id}\n      key={`item__${index}`}\n      placeholder={placeholder}\n      onlyNumbers={onlyNumbers}\n      type={password ? \"password\" : \"text\"}\n      oneCharWide\n      maxLength={\"1\"}\n      minLength={\"1\"}\n      showError={!!errorMessage}\n      value={item.value}\n      onInput={(e) => updateValue(e, index)}\n      onKeyDown={(e) => handleKeyDown(e, index)}\n    />\n  ));\n  return (\n    <Box className={classNames([\"ui-text-field__wrapper\", `size__${size}`])}>\n      {label && (\n        <Box is={\"label\"}>\n          <Text\n            marginTop={0}\n            className={classNames({\n              \"ui-text-field__label\": true,\n              labelClass,\n            })}\n            fontFace={labelFontFace}\n          >\n            {label}\n          </Text>\n        </Box>\n      )}\n      <Box\n        display={\"inline-flex\"}\n        className={\"ui-pin-input-container\"}\n        style={{ \"--spacing\": spacing }}\n      >\n        {textFields}\n      </Box>\n      {errorMessage && !invisible && (\n        <Box className={\"ui-text-field__error\"}>\n          <Icon icon={ErrorIcon} className={\"ui-text-field__error-icon\"} />\n          <Text\n            className={\"ui-text-field__error-text\"}\n            scale={\"subhead\"}\n            fontFace={\"circularSTD\"}\n          >\n            {errorMessage}\n          </Text>\n        </Box>\n      )}\n    </Box>\n  );\n};\n\nexport default PinInput;\n\nPinInput.propTypes = {\n  ...inputPropTypes,\n  noOfCharacters: PropTypes.number,\n  placeholder: PropTypes.string,\n  password: PropTypes.bool,\n  spacing: PropTypes.string,\n  onChange: PropTypes.func,\n  errorMessage: PropTypes.string,\n};\n\nPinInput.defaultProps = {\n  ...defaultProps,\n  noOfCharacters: 6,\n  placeholder: \"-\",\n  spacing: \"8px\",\n};\n"],"names":["PinInput","label","size","labelClass","labelFontFace","spacing","errorMessage","invisible","noOfCharacters","initialValue","placeholder","password","onlyNumbers","onChange","props","data","setData","useState","initialized","setInitialized","initiated","setInitiated","updateValue","e","index","cloneData","value","nextInput","prev","curr","useEffect","i","uniqueRandomString","datum","handleKeyDown","textFields","item","jsx","TextField","jsxs","Box","classNames","Text","Icon","ErrorIcon","PinInput$1","inputPropTypes","PropTypes","defaultProps"],"mappings":"ooBAYA,MAAAA,EAAA,CAAA,CACA,MAAAC,EACA,KAAAC,GACA,WAAAC,GACA,cAAAC,GACA,QAAAC,GACA,aAAAC,EACA,UAAAC,GACA,eAAAC,EACA,aAAAC,EACA,YAAAC,GACA,SAAAC,GACA,YAAAC,GACA,SAAAC,EACA,GAAAC,EACA,IAAA,CACA,KAAA,CAAAC,EAAAC,CAAA,EAAAC,EAAA,SAAA,CAAA,CAAA,EACA,CAAAC,EAAAC,EAAA,EAAAF,WAAA,EAAA,EACA,CAAAG,EAAAC,EAAA,EAAAJ,WAAA,EAAA,EAEAK,GAAA,CAAAC,EAAAC,IAAA,CACA,MAAAC,EAAA,CAAA,GAAAV,CAAA,EACAW,EAAAH,EAAA,OAAA,MACA,GAAAG,GAEA,GAAAF,EAAAT,EAAA,OAAA,EAAA,CACA,IAAAY,EAAA,SAAA,eAAAZ,EAAAS,EAAA,CAAA,EAAA,EAAA,EACAG,EAAA,MAAA,EACA,WAAA,IAAA,CACAA,EAAA,OAAA,CAAA,CACA,WAEA,CAAAD,GACAF,EAAA,EAAA,CACA,IAAAG,EAAA,SAAA,eAAAZ,EAAAS,EAAA,CAAA,EAAA,EAAA,EACAG,EAAA,MAAA,EACA,WAAA,IAAA,CACAA,EAAA,OAAA,CAAA,CACA,EAGAF,EAAAD,CAAA,EAAA,MAAAE,EAEAV,EAAAS,CAAA,EAEAZ,GAAA,OAAAA,GAAA,YACAA,EACAE,EAAA,OACA,CAAAa,EAAAC,MACA,OAAAD,GAAA,SAAAA,EAAAA,EAAA,OAAAC,GAAA,KACA,EACA,EAAA,CAEA,EAGAC,EAAAA,UAAA,IAAA,CACA,GAAA,CAAAZ,EACA,QAAAa,EAAA,EAAAA,EAAAvB,EAAAuB,IACAf,EAAAD,IACAA,EAAA,KAAA,CACA,MAAA,GACA,GAAAiB,GAAA,GAAA,CAAA,CAAA,CACA,EACAjB,EACA,EACAI,GAAA,EAAA,EAGAD,GAAA,CAAAE,GAAAX,EAAA,SAAAM,EAAA,SACAC,EAAAD,GACAA,EAAA,IAAA,CAAAkB,EAAAT,KAAA,CACA,GAAAS,EACA,MAAAxB,EAAAe,CAAA,CAAA,EACA,CAAA,EAEAH,GAAA,EAAA,EACA,EACA,CAAAN,EAAAN,EAAAS,EAAAE,EAAAZ,CAAA,CAAA,EAEA,MAAA0B,GAAA,MAAAX,EAAAC,IAAA,CACA,GAAAD,EAAA,MAAA,aACAC,IAAA,EAAA,CACA,IAAAG,EAAA,SAAA,eAAAZ,EAAAS,EAAA,CAAA,EAAA,EAAA,EACAG,EAAA,MAAA,EACA,WAAA,IAAA,CACAA,EAAA,OAAA,CAAA,CACA,EAGA,GAAAJ,EAAA,MAAA,cACAC,IAAAT,EAAA,OAAA,EAAA,CACA,IAAAY,EAAA,SAAA,eAAAZ,EAAAS,EAAA,CAAA,EAAA,EAAA,EACAG,EAAA,MAAA,EACA,WAAA,IAAA,CACAA,EAAA,OAAA,CAAA,CACA,EAEA,EAGAQ,GAAApB,EAAA,IAAA,CAAAqB,EAAAZ,IACAa,EAAA,IAAAC,GAAA,CACA,GAAAF,EAAA,GAEA,YAAA1B,GACA,YAAAE,GACA,KAAAD,GAAA,WAAA,OACA,YAAA,GACA,UAAA,IACA,UAAA,IACA,UAAA,CAAA,CAAAL,EACA,MAAA8B,EAAA,MACA,QAAAb,GAAAD,GAAAC,EAAAC,CAAA,EACA,UAAAD,GAAAW,GAAAX,EAAAC,CAAA,CAAA,EAVA,SAAAA,GAAA,CAYA,EAEA,OAAAe,OAAAC,GAAA,UAAAC,EAAA,CAAA,yBAAA,SAAAvC,IAAA,CAAA,EACA,SAAA,CACAD,GAAAoC,EAAA,IAAAG,EAAA,CAAA,GAAA,QACA,SAAAH,EAAA,IAAAK,EAAA,CACA,UAAA,EACA,UAAAD,EAAA,CACA,uBAAA,GACA,WAAAtC,EAAA,CACA,EACA,SAAAC,GAEA,SAAAH,CAAA,CAAA,EAEA,EAEAoC,EAAA,IAAAG,EAAA,CACA,QAAA,cACA,UAAA,yBACA,MAAA,CAAA,YAAAnC,EAAA,EAEA,SAAA8B,EAAA,CACA,EACA7B,GAAA,CAAAC,IACAgC,EAAA,KAAAC,EAAA,CAAA,UAAA,uBACA,SAAA,CAAAH,EAAA,IAAAM,GAAA,CAAA,KAAAC,GAAA,UAAA,4BAAA,EACAP,EAAA,IAAAK,EAAA,CACA,UAAA,4BACA,MAAA,UACA,SAAA,cAEA,SAAApC,CAAA,CACA,CAAA,EACA,CAEA,CAAA,CAAA,CAEA,EAEAuC,EAAA7C,EAEAA,EAAA,UAAA,CACA,GAAA8C,GACA,eAAAC,EAAA,OACA,YAAAA,EAAA,OACA,SAAAA,EAAA,KACA,QAAAA,EAAA,OACA,SAAAA,EAAA,KACA,aAAAA,EAAA,MACA,EAEA/C,EAAA,aAAA,CACA,GAAAgD,GACA,eAAA,EACA,YAAA,IACA,QAAA,KACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}