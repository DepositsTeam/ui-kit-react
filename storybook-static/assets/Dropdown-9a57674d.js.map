{"version":3,"file":"Dropdown-9a57674d.js","sources":["../../src/components/dropdown/Dropdown.jsx"],"sourcesContent":["import React, { useState, useEffect, useLayoutEffect, forwardRef } from \"react\";\nimport \"./Dropdown.scss\";\nimport PropTypes from \"prop-types\";\nimport Box from \"../box\";\nimport TextField from \"../text-field\";\nimport inputPropTypes, { defaultProps } from \"../../utils/inputPropTypes\";\nimport classNames from \"../../utils/classNames\";\nimport Text from \"../text\";\n\nconst Dropdown = forwardRef(\n  (\n    {\n      label,\n      onChange,\n      onBlur,\n      name,\n      options,\n      initialValue,\n      returnObjModel,\n      ...props\n    },\n    ref\n  ) => {\n    const [inputValue, setInputValue] = useState(\"\");\n    const [showOptions, setShowOptions] = useState(false);\n    const [computedOptions, setComputedOptions] = useState([]);\n    const [selectedIndex, setSelectedIndex] = useState(-1);\n    const [selectedOption, setSelectedOption] = useState(null);\n    const [isBlur, setIsBlur] = useState(true);\n\n    const returnOptionValue = (option) =>\n      typeof option === \"object\" ? option.value : option;\n\n    const returnOptionText = (option) =>\n      typeof option === \"object\" ? option.text : option;\n\n    useLayoutEffect(() => {\n      if (initialValue) {\n        setInputValue(initialValue);\n      }\n\n    }, []);\n\n    useEffect(() => {\n      if (!isBlur) {\n        setShowOptions(true);\n      }\n      if (selectedOption) {\n        if (inputValue !== returnOptionText(selectedOption)) {\n          setSelectedOption(null);\n        }\n      } else {\n        if (inputValue) {\n          setComputedOptions(\n            [...options].filter((option) => {\n              if (typeof option === \"string\") {\n                return option.toLowerCase().includes(inputValue.toLowerCase());\n              } else {\n                return option.text\n                  .toLowerCase()\n                  .includes(inputValue.toLowerCase());\n              }\n            })\n          );\n        } else {\n          setComputedOptions([...options]);\n        }\n      }\n    }, [options, inputValue, selectedOption, isBlur]);\n\n    useEffect(() => {\n      if (onChange && typeof onChange === \"function\") {\n        onChange(returnObjModel ? selectedOption : selectedOption?.value);\n      }\n    }, [selectedOption]);\n\n    useEffect(() => {\n      if (isBlur && !selectedOption) {\n        let exactMatch = false;\n        for (let option of computedOptions) {\n          if (typeof option === \"string\") {\n            if (option.toLowerCase() === inputValue.toLowerCase()) {\n              exactMatch = true;\n              setInputValue(option);\n              setSelectedOption(option);\n              break;\n            }\n          } else {\n            if (option.text.toLowerCase() === inputValue.toLowerCase()) {\n              exactMatch = true;\n              setInputValue(option.text);\n              setSelectedOption(option);\n              break;\n            }\n          }\n        }\n        if (!exactMatch) {\n          setInputValue(\"\");\n          setSelectedOption(null);\n        }\n      }\n    }, [isBlur]);\n\n    const handleFocus = () => {\n      setIsBlur(false);\n      setShowOptions(true);\n    };\n\n    const handleBlur = async () => {\n      setIsBlur(true);\n      setTimeout(() => {\n        setShowOptions(false);\n      }, 300);\n    };\n\n    const handleClickedOption = async (option) => {\n      if (option) {\n        if (typeof option === \"string\") {\n          setInputValue(option);\n        } else {\n          setInputValue(option.text);\n        }\n        setSelectedOption(option);\n        setTimeout(() => {\n          setShowOptions(false);\n        }, 300);\n      }\n    };\n\n    const handleLeave = (e) => {\n      if (!e.target.closest(\".ui-dropdown\")) {\n        handleBlur();\n      }\n    };\n\n    const handleKeyDown = async (e) => {\n      switch (e.key) {\n        case \"ArrowDown\":\n          if (!showOptions) {\n            setShowOptions(true);\n          }\n          if (selectedIndex + 1 <= computedOptions.length - 1)\n            setSelectedIndex(selectedIndex + 1);\n          else setSelectedIndex(0);\n          break;\n        case \"ArrowUp\":\n          if (!showOptions) {\n            setShowOptions(true);\n          }\n          if (selectedIndex - 1 >= 0) setSelectedIndex(selectedIndex - 1);\n          else setSelectedIndex(computedOptions.length - 1);\n          break;\n        case \"Enter\":\n          handleClickedOption(computedOptions[selectedIndex]);\n          break;\n        case \"Escape\":\n          handleBlur();\n          e.target.blur();\n          break;\n        default:\n          break;\n      }\n    };\n\n    useEffect(() => {\n      window.addEventListener(\"click\", handleLeave);\n      return () => {\n        window.removeEventListener(\"click\", handleLeave);\n      };\n    }, []);\n\n    const mappedComputedOptions = computedOptions.map((option, index) => (\n      <Box\n        className={classNames({\n          \"ui-dropdown__option\": true,\n          active: selectedIndex === index,\n        })}\n        onMouseEnter={() => setSelectedIndex(index)}\n        onClick={() => handleClickedOption(option)}\n        key={`option-${index}`}\n      >\n        {typeof option === \"object\" && option.icon && (\n          <Box className={\"ui-dropdown__icon\"}>{option.icon}</Box>\n        )}\n        <Text marginY={0} scale={\"subhead\"} fontFace={\"circularSTD\"}>\n          {typeof option === \"string\" ? option : option.text}\n        </Text>\n      </Box>\n    ));\n\n    return (\n      <Box className={\"ui-dropdown\"}>\n        <TextField\n          dropDown\n          {...props}\n          value={inputValue}\n          onKeyDown={handleKeyDown}\n          onFocus={handleFocus}\n          onBlur={handleBlur}\n          onChange={(e) => setInputValue(e.target.value)}\n          onRightIconClick={() => setShowOptions(!showOptions)}\n          leftIconComponent={selectedOption?.icon}\n          ref={ref}\n        />\n        {showOptions && (\n          <Box className={\"ui-dropdown__options\"}>{mappedComputedOptions}</Box>\n        )}\n      </Box>\n    );\n  }\n);\n\nexport default Dropdown;\n\nDropdown.defaultProps = {\n  ...defaultProps,\n};\n\nDropdown.propTypes = {\n  ...inputPropTypes,\n  options: PropTypes.array,\n  returnObjModel: PropTypes.bool,\n  onChange: PropTypes.func,\n  initialValue: PropTypes.string,\n};\n"],"names":["Dropdown","forwardRef","label","onChange","onBlur","name","options","initialValue","returnObjModel","props","ref","inputValue","setInputValue","useState","showOptions","setShowOptions","computedOptions","setComputedOptions","selectedIndex","setSelectedIndex","selectedOption","setSelectedOption","isBlur","setIsBlur","returnOptionText","option","useLayoutEffect","useEffect","exactMatch","handleFocus","handleBlur","handleClickedOption","handleLeave","handleKeyDown","mappedComputedOptions","index","jsxs","Box","classNames","jsx","Text","TextField","Dropdown$1","defaultProps","inputPropTypes","PropTypes"],"mappings":"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"}